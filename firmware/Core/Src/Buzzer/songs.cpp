#include "Buzzer/buzzer.hpp"

// clang-format off

// Startup tone.

static constexpr uint16_t SONG_STARTUP_NOTE_LENGTH_MS = 250;

static constexpr Note SONG_STARTUP_NOTES[] = {
    NOTE_D_5,
    NOTE_D_6,
};

// BLE connect tone.

static constexpr uint16_t SONG_BLE_CONNECT_NOTE_LENGTH_MS = 250;

static constexpr Note SONG_BLE_CONNECT_NOTES[] = {
    NOTE_E_5,
    NOTE_G_5,
    NOTE_E_6,
};

// BLE disconnect tone.

static constexpr uint16_t SONG_BLE_DISCONNECT_NOTE_LENGTH_MS = 250;

static constexpr Note SONG_BLE_DISCONNECT_NOTES[] = {
  NOTE_E_5,
  NOTE_G_5,
  NOTE_G_4
};

// Home Depot theme song.

static constexpr uint16_t SONG_HOME_DEPOT_NOTE_LENGTH_MS = 250;

static constexpr Note SONG_HOME_DEPOT_NOTES[] = {
    // Intro
    NOTE_A_4, NOTE_A_4, NOTE_D_5, NOTE_A_4, REST, NOTE_A_4, REST, NOTE_A_4, NOTE_C_5, NOTE_A_4, REST, NOTE_A_4, REST, NOTE_A_4, NOTE_G_4, NOTE_A_4,
    NOTE_A_4, NOTE_A_4, NOTE_D_5, NOTE_A_4, REST, NOTE_A_4, REST, NOTE_A_4, NOTE_C_5, NOTE_A_4, REST, NOTE_A_4, REST, NOTE_A_4, NOTE_G_4, NOTE_A_4,
    NOTE_A_4, NOTE_A_4, NOTE_D_5, NOTE_A_4, REST, NOTE_A_4, REST, NOTE_A_4, NOTE_C_5, NOTE_A_4, REST, NOTE_A_4, REST, NOTE_A_4, NOTE_G_4, NOTE_A_4,

    // Transition
    REST, NOTE_A_4, NOTE_D_5, NOTE_A_4, NOTE_C_5, NOTE_D_6, REST,

    // Loop
    NOTE_A_4, NOTE_D_5, NOTE_A_4, NOTE_C_5, NOTE_A_4, NOTE_G_4, NOTE_D_6, REST,
    NOTE_A_4, NOTE_D_5, NOTE_A_4, NOTE_C_5, NOTE_A_4, NOTE_G_4, NOTE_D_6, REST,
    NOTE_A_4, NOTE_D_5, NOTE_A_4, NOTE_C_5, NOTE_A_4, NOTE_G_4, NOTE_D_6, REST,
    NOTE_A_4, NOTE_D_5, NOTE_A_4, NOTE_C_5, NOTE_A_4, NOTE_G_4, NOTE_D_6, REST,
    NOTE_A_4, NOTE_D_5, NOTE_A_4, NOTE_C_5, NOTE_A_4, NOTE_G_4, NOTE_D_6, REST,
    NOTE_A_4, NOTE_D_5, NOTE_A_4, NOTE_C_5, NOTE_A_4, NOTE_G_4, NOTE_D_6, REST,
    NOTE_A_4, NOTE_D_5, NOTE_A_4, NOTE_C_5, NOTE_A_4, NOTE_G_4, NOTE_D_6, REST,

    // End
    NOTE_A_4, NOTE_D_5, NOTE_A_4, NOTE_A_4,
};

// Nokia ringtone.

static constexpr uint16_t SONG_NOKIA_NOTE_LENGTH_MS = 180;

static constexpr Note SONG_NOKIA_NOTES[] = {
    NOTE_E_6,  NOTE_D_6, NOTE_FS_5, NOTE_FS_5, NOTE_GS_5, NOTE_GS_5,
    NOTE_CS_6, NOTE_B_5, NOTE_D_5,  NOTE_D_5,  NOTE_E_5,  NOTE_E_5,
    NOTE_B_5,  NOTE_A_5, NOTE_CS_5, NOTE_CS_5, NOTE_E_5,  NOTE_E_5,
    NOTE_A_5,  NOTE_A_5, NOTE_A_5,  NOTE_A_5,  REST, REST,
    NOTE_E_6,  NOTE_D_6, NOTE_FS_5, NOTE_FS_5, NOTE_GS_5, NOTE_GS_5,
    NOTE_CS_6, NOTE_B_5, NOTE_D_5,  NOTE_D_5,  NOTE_E_5,  NOTE_E_5,
    NOTE_B_5,  NOTE_A_5, NOTE_CS_5, NOTE_CS_5, NOTE_E_5,  NOTE_E_5,
    NOTE_A_5,  NOTE_A_5, NOTE_A_5,  NOTE_A_5,  REST,
};

// Begin search tone.

static constexpr uint16_t SONG_BEGIN_SEARCH_NOTE_LENGTH_MS = 250;

static constexpr Note SONG_BEGIN_SEARCH_NOTES[] = {
    NOTE_A_4, NOTE_B_4, NOTE_C_5, 
    NOTE_C_5, NOTE_D_5, NOTE_E_5, 
    NOTE_D_6,
};

// Begin fast solve tone.

static constexpr uint16_t SONG_BEGIN_FAST_SOLVE_NOTE_LENGTH_MS = 250;

static constexpr Note SONG_BEGIN_FAST_SOLVE_NOTES[] = {
  NOTE_C_5, NOTE_C_5, NOTE_C_5, NOTE_D_6,
};

// Begin slow solve tone.

static constexpr uint16_t SONG_BEGIN_SLOW_SOLVE_NOTE_LENGTH_MS = 250;

static constexpr Note SONG_BEGIN_SLOW_SOLVE_NOTES[] = {
  NOTE_C_5, NOTE_C_5, NOTE_C_5, NOTE_D_6, NOTE_C_5, NOTE_D_6,
};

const Buzzer::SongHandle Buzzer::m_songs[] = {
    // NONE
    {},

    // STARTUP
    {SONG_STARTUP_NOTES, SONG_STARTUP_NOTE_LENGTH_MS / ROBOT_UPDATE_PERIOD_MS},

    // BLE_CONNECT
    {SONG_BLE_CONNECT_NOTES, SONG_BLE_CONNECT_NOTE_LENGTH_MS / ROBOT_UPDATE_PERIOD_MS},

    // BLE_DISCONNECT
    {SONG_BLE_DISCONNECT_NOTES, SONG_BLE_DISCONNECT_NOTE_LENGTH_MS / ROBOT_UPDATE_PERIOD_MS},

    // HOME_DEPOT
    {SONG_HOME_DEPOT_NOTES, SONG_HOME_DEPOT_NOTE_LENGTH_MS / ROBOT_UPDATE_PERIOD_MS},

    // NOKIA
    {SONG_NOKIA_NOTES, SONG_NOKIA_NOTE_LENGTH_MS / ROBOT_UPDATE_PERIOD_MS, false},

    // BEGIN_SEARCH
    {SONG_BEGIN_SEARCH_NOTES, SONG_BEGIN_SEARCH_NOTE_LENGTH_MS / ROBOT_UPDATE_PERIOD_MS},

    // BEGIN_FAST_SOLVE
    {SONG_BEGIN_FAST_SOLVE_NOTES, SONG_BEGIN_FAST_SOLVE_NOTE_LENGTH_MS / ROBOT_UPDATE_PERIOD_MS},

    // BEGIN_SLOW_SOLVE
    {SONG_BEGIN_SLOW_SOLVE_NOTES, SONG_BEGIN_SLOW_SOLVE_NOTE_LENGTH_MS / ROBOT_UPDATE_PERIOD_MS},
};

// clang-format on
